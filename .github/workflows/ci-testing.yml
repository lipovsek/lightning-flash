name: CI testing

# see: https://help.github.com/en/actions/reference/events-that-trigger-workflows
on: # Trigger the workflow on push or pull request, but only for the master branch
  push:
    branches: ["master", "release/*"]
  pull_request:
    branches: ["master", "release/*"]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.head_ref }}
  cancel-in-progress: ${{ ! (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/release/')) }}

defaults:
  run:
    shell: bash

jobs:
  pytester:

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      # max-parallel: 6
      matrix:
        # PyTorch 1.5 is failing on Win and bolts requires torchvision>=0.5
        os: [ubuntu-20.04, macOS-12, windows-2022]
        python-version: [3.7, 3.9]
        requires: ['oldest', 'latest']
        topic: ['core']
        extra: [[]]
        exclude:
          # Skip if torch<1.8 and py3.9 on Linux: https://github.com/pytorch/pytorch/issues/50014
          - { python-version: 3.9, requires: 'oldest' }
          - { os: macOS-12, requires: 'oldest' }
          - { os: windows-2022, requires: 'oldest' }
        include:
          - { os: 'ubuntu-20.04', python-version: 3.9, topic: 'core', extra: []}
          - { os: 'ubuntu-20.04', python-version: 3.9, topic: 'image', extra: ['image_extras']}
          - { os: 'ubuntu-20.04', python-version: 3.9, topic: 'image', extra: ['image_extras_baal']}
          - { os: 'ubuntu-20.04', python-version: 3.9, topic: 'video', extra: []}
          - { os: 'ubuntu-20.04', python-version: 3.9, topic: 'video', extra: ['video_extras']}
          - { os: 'ubuntu-20.04', python-version: 3.9, topic: 'tabular', extra: []}
          - { os: 'ubuntu-20.04', python-version: 3.9, topic: 'text', extra: []}
          - { os: 'ubuntu-20.04', python-version: 3.8, topic: 'pointcloud', extra: []}
          - { os: 'ubuntu-20.04', python-version: 3.9, topic: 'serve', extra: []}
          - { os: 'ubuntu-20.04', python-version: 3.9, topic: 'graph', extra: []}
          - { os: 'ubuntu-20.04', python-version: 3.9, topic: 'audio', extra: []}

    # Timeout: https://stackoverflow.com/a/59076067/4521646
    timeout-minutes: 50
    env:
      FREEZE_REQUIREMENTS: 1

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set Swap Space
      if: runner.os == 'Linux'
      uses: pierotofy/set-swap-space@master
      with:
        swap-size-gb: 10

    # Github Actions: Run step on specific OS: https://stackoverflow.com/a/57948488/4521646
    - name: Setup macOS
      if: runner.os == 'macOS'
      run: |
        brew update
        brew install libomp  # https://github.com/pytorch/pytorch/issues/20030

    - name: Install graphviz
      if: contains( matrix.topic , 'serve' )
      run: sudo apt-get install graphviz

    - name: Set min. dependencies
      if: matrix.requires == 'oldest'
      run: |
        fname = 'requirements.txt'
        ignore = ['pandas', 'torchmetrics']
        lines = [line if any([line.startswith(package) for package in ignore]) else line.replace('>', '=') for line in open(fname).readlines()]
        open(fname, 'w').writelines(lines)
      shell: python

    - name: Install graph test dependencies
      if: contains( matrix.topic , 'graph' )
      run: |
        pip install torch==1.11.0+cpu torchvision==0.12.0+cpu -f https://download.pytorch.org/whl/torch_stable.html
        pip install torch-scatter -f https://data.pyg.org/whl/torch-1.11.0+cpu.html
        pip install torch-sparse -f https://data.pyg.org/whl/torch-1.11.0+cpu.html
        pip install torch-cluster -f https://data.pyg.org/whl/torch-1.11.0+cpu.html

    - name: Adjust extras
      run: |
        import os
        extras = ['${{ matrix.topic }}'] + ${{ toJSON(matrix.extra) }}
        with open(os.getenv('GITHUB_ENV'), "a") as gh_env:
            gh_env.write(f"EXTRAS={','.join(extras)}")
      shell: python

    - name: Install package & dependencies
      env:
        SYSTEM_VERSION_COMPAT: 1
      run: |
        pip --version
        pip install cython "torch>=1.7.1" -f https://download.pytorch.org/whl/cpu/torch_stable.html
        pip install .[$EXTRAS,test] --upgrade --prefer-binary --find-links https://download.pytorch.org/whl/cpu/torch_stable.html

    - name: Install vissl
      if: contains( matrix.topic , 'image_extras' )
      run: |
        pip install git+https://github.com/facebookresearch/ClassyVision.git
        pip install git+https://github.com/facebookresearch/vissl.git

    - name: Install serve test dependencies
      if: contains( matrix.topic , 'serve' )
      run: |
        sudo apt-get install libsndfile1
        pip install '.[all,audio]' icevision sahi==0.8.19 effdet --upgrade

    - name: Install audio test dependencies
      if: contains( matrix.topic , 'audio' )
      run: |
        sudo apt-get install libsndfile1
        pip install matplotlib
        pip install '.[audio,image]' torch==1.11.0 --upgrade

    - name: Cache datasets
      uses: actions/cache@v3
      with:
        path: data # This path is specific to Ubuntu
        key: flash-datasets-${{ hashFiles('tests/examples/test_scripts.py') }}
        restore-keys: flash-datasets-

    - name: Tests
      env:
        FLASH_TEST_TOPIC: ${{ join(matrix.topic,',') }}
        FIFTYONE_DO_NOT_TRACK: true
      run: |
        pip list
        # FixMe: include doctests for src/
        coverage run --source flash -m pytest \
          tests/core \
          tests/deprecated_api \
          tests/examples \
          tests/template \
          tests/${{ matrix.topic }} \
          -v # --reruns 3 --reruns-delay 2

    - name: Statistics
      run: |
        coverage report
        coverage xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        env_vars: OS,PYTHON
        name: codecov-umbrella
        fail_ci_if_error: false


  testing-guardian:
    runs-on: ubuntu-latest
    needs: pytester
    if: always()
    steps:
    - run: echo "${{ needs.pytester.result }}"
    - name: failing...
      if: needs.pytester.result == 'failure'
      run: exit 1
    - name: cancelled or skipped...
      if: contains(fromJSON('["cancelled", "skipped"]'), needs.pytester.result)
      timeout-minutes: 1
      run: sleep 90
